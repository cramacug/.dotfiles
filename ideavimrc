source ~/.vimrc

" Vim always win!
" sethandler n:vim i:vim == a:vim
" Use vim shortcuts instead IDE"
" https://github.com/JetBrains/ideavim/wiki/sethandler "
sethandler a:vim

" *************************************************************************
" Plugins
" *************************************************************************

" Use Idea to join lines smartly
" ................................................
set ideajoin

" Copy to system clipboard as well
" ................................................
set clipboard+=unnamed,autoselect,ideaput
" set clipboard=unnamed,exclude:cons\|mac,unnamed,ideaput

" Surround text
" ................................................
set surround

" Comment text with gc
" ................................................
set commentary

" Highlight yank selection ----------------------
" ................................................
set highlightedyank
let g:highlightedyank_highlight_color = "rgba(200, 200, 50, 100)"
let g:highlightedyank_highlight_duration = "1000"


" *************************************************************************
" Map leader with comma --------------------------
" *************************************************************************
let mapleader=","

" Rename
" ................................................
map <leader>R :action RenameElement<CR>
map <leader>R :action RenameElement<CR>


" Run and debugging
" ................................................
map <leader>r :action Run<CR>
map <leader>d :action Debug<CR>
" Add a BreaKpoint
map <leader>bk :action ToggleLineBreakpoint<CR>
" Breakpoint Mute
map <leader>bm :action ToggleBreakpointEnabled<CR>
" Mute all Breakpoints
map <leader>mb :action XDebugger.MuteBreakpoints<CR>

" VCS Git actions
" ................................................
map <leader>A :action Annotate<CR>
map <leader>H :action Vcs.ShowTabbedFileHistory<CR>
map <leader>M :action Git.CompareWithBranch<CR>

" noremap ,g :action FindInPath<CR>
" noremap ,s :action FileStructurePopup<CR>

" ReformatCode
" ................................................
nnoremap == :action ReformatCode<CR>
vnoremap == :action ReformatCode<CR>

" Navigation
" ................................................
" --> COMMAND + b
nnoremap gd :action GotoDeclaration<CR>
" --> COMMAND + SHIFT +  b
nnoremap gi :action GotoImplementation<CR>
" --> COMMAND + u
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gb :action JumpToLastChange<CR>

nnoremap <leader>u :action FindUsages<CR>

" MRU (Most Recent Uses) & Navigation
" ................................................
map <leader>f :action GotoClass<CR>
map <leader>F :action GotoFile<CR>

nnoremap <leader>a :action GotoAction<CR>
nnoremap <leader>e :action RecentFiles<CR>
" nnoremap <leader>E :action SearchEverywhere<CR>
" nnoremap <leader>to :action CloseAllEditorsButActive<CR> is already in vimrc

" Macros"
let @d='diw"0P'

" Plug 'vim-scripts/ReplaceWithRegister'


"  zR :action ExpandAllRegions<CR>:action ExpandAllRegions<CR>
" map <leader> za :action
" CollapseRegion
" ExpandRegion

" map <leader>c :action Stop<CR>
" nnoremap cc :action CommentByLineComment<CR>
" vnoremap cc :action CommentByLineComment<CR>
" nnoremap <C-CR> :action ShowIntentionActions<CR>

" Extract and inline variables, parameters, methods...
" IntroduceVariable
" ExtractFunction
" Inline
" IntroduceParameter
" ................................................
" vnoremap <leader>v :action IntroduceVariable<CR>
" vnoremap <leader>m :action ExtractFunction<CR>
" vnoremap <leader>i :action Inline<CR>
" vnoremap <leader>p :action IntroduceParameter<CR>


" EditorSelectWord
" EditorUnSelectWord
" ................................................
" nnoremap <leader>Up :action EditorSelectWord<CR>
" nnoremap <leader>Down :action EditorUnSelectWord<CR>
